from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from rest_framework.generics import ListAPIView
from core.serializers import RequestCreateSerializer,RequestDetailSerializer,LoginSerializer,VerifyCodeSerializer,RegisterSerializer
from core.models import Request
from core.permissions import IsStudentOrLecturer, IsManager, IsOwnerOrManager
from rest_framework.generics import RetrieveUpdateAPIView
from rest_framework.exceptions import PermissionDenied
from django.utils import timezone
from datetime import timedelta
from django.core.mail import send_mail
from core.services.request_status import can_set_done


# üîç –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –∫–æ–¥—É (–±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
class VerifyCodeView(APIView):
    def post(self, request):
        # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –¥–∞–Ω—ñ –∑–∞–ø–∏—Ç—É –¥–æ VerifyCodeSerializer
        serializer = VerifyCodeSerializer(data=request.data)

        # –Ø–∫—â–æ –∫–æ–¥ –≤–∞–ª—ñ–¥–Ω–∏–π
        if serializer.is_valid():
            return Response({
                "status": "valid",                    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ, —â–æ –∫–æ–¥ –¥—ñ–π—Å–Ω–∏–π
                "role": serializer.role,              # –†–æ–ª—å, –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –∑–∞ –∫–æ–¥–æ–º
                **serializer.profile_data             # –Ü–º‚Äô—è, –ø—Ä—ñ–∑–≤–∏—â–µ, –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ
            }, status=status.HTTP_200_OK)

        # –Ø–∫—â–æ –∫–æ–¥ –Ω–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
        return Response(serializer.errors, status=status.HTTP_404_NOT_FOUND)


# üìù –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
class RegisterAPIView(APIView):
    def post(self, request):
        # –ü–µ—Ä–µ–¥–∞—î–º–æ POST-–¥–∞–Ω—ñ —É RegisterSerializer
        serializer = RegisterSerializer(data=request.data)

        # –Ø–∫—â–æ –¥–∞–Ω—ñ –≤–∞–ª—ñ–¥–Ω—ñ (–∫–æ–¥ –∑–Ω–∞–π–¥–µ–Ω–æ, email —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π, –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π)
        if serializer.is_valid():
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ create()
            user = serializer.save()
            return Response({
                "message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.",
                "email": user.email,
                "role": user.role
            }, status=status.HTTP_201_CREATED)

        # –Ø–∫—â–æ –±—É–ª–∏ –ø–æ–º–∏–ª–∫–∏ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# üîê –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –≤—Ö–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è)
class LoginUserView(APIView):
    def post(self, request):
        # –ü–µ—Ä–µ–¥–∞—î–º–æ email —Ç–∞ code —É LoginSerializer
        serializer = LoginSerializer(data=request.data)

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ –∫–æ–¥ –≤–∞–ª—ñ–¥–Ω—ñ
        if serializer.is_valid():
            # –ú–µ—Ç–æ–¥ create() –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–æ–∫–µ–Ω + —ñ–Ω—Ñ–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            result = serializer.save()
            return Response({
                "message": "–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π",
                "token": result["token"],   # –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
                "user": result["user"]      # –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: email, —ñ–º‚Äô—è, —Ä–æ–ª—å
            }, status=status.HTTP_200_OK)

        # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó ‚Äî –Ω–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –∫–æ–¥
        return Response(serializer.errors, status=status.HTTP_401_UNAUTHORIZED)

class RequestCreateView(APIView):
    permission_classes = [IsAuthenticated, IsStudentOrLecturer]

    def post(self, request):
        serializer = RequestCreateSerializer(data=request.data, context={'request': request})
        if serializer.is_valid():
            new_request = serializer.save()
            return Response({
                "message": "–ó–∞—è–≤–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ",
                "code": new_request.code,
                "id": new_request.id
            }, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class SomeManagerOnlyView(APIView):
    permission_classes = [IsAuthenticated, IsManager]

class RequestListView(ListAPIView):
    serializer_class = RequestDetailSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        user = self.request.user

        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–∞—á–∏—Ç—å —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó –∑–∞—è–≤–∫–∏
        if user.role in ["student", "lecturer"]:
            return Request.objects.filter(user=user)

        # –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞—á–∏—Ç—å —É—Å—ñ –∑–∞—è–≤–∫–∏
        queryset = Request.objects.all()

        # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ñ—ñ–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å—É ‚Äî –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –π–æ–≥–æ
        status = self.request.query_params.get("status")
        if status:
            queryset = queryset.filter(status=status)

        return queryset


class RequestUpdateView(RetrieveUpdateAPIView):
    queryset = Request.objects.all()
    serializer_class = RequestDetailSerializer
    permission_classes = [IsAuthenticated, IsOwnerOrManager]


    def perform_update(self, serializer):
        request = self.request
        user = request.user
        instance = self.get_object()
        validated_data = serializer.validated_data


        # 1. –ú–µ–Ω–µ–¥–∂–µ—Ä

        if user.role == 'manager':

            # –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–∞–π—Å—Ç—Ä–∞ –≤ —Å—Ç–∞—Ç—É—Å—ñ approved ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ on_check
            master_fields = [
                "assigned_master_name",
                "assigned_master_company",
                "assigned_master_phone",
                "assigned_company_phone",
                "work_date"
            ]
            updating_master = any(field in validated_data for field in master_fields)

            if updating_master:
                if instance.status != 'approved':
                    raise PermissionDenied("–ü—Ä–∏–∑–Ω–∞—á–∞—Ç–∏ –º–∞–π—Å—Ç—Ä–∞ –º–æ–∂–Ω–∞ –ª–∏—à–µ –≤ —Å—Ç–∞—Ç—É—Å—ñ 'approved'.")
                validated_data['status'] = 'on_check'
                serializer.save()
                return

            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
            if validated_data.get('status') == 'done':
                can_complete, reason = can_set_done(instance)
                if not can_complete:
                    raise PermissionDenied(reason)

                validated_data['completed_at'] = timezone.now()

                send_mail(
                    subject="–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    message=(
                        f"–ó–∞—è–≤–∫–∞ –±—É–ª–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∞. "
                        f"–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Å–∫–∞—Ä–≥–∏ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞ –ø–æ—à—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {user.email} "
                        f"–ø—Ä–æ—Ç—è–≥–æ–º 30 –¥–Ω—ñ–≤ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è."
                    ),
                    from_email=user.email,
                    recipient_list=[instance.user.email],
                    fail_silently=True
                )

                serializer.save()
                return

            # –Ü–Ω—à—ñ –∑–º—ñ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–Ω–∞–ø—Ä., –∑–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É) ‚Äî –¥–æ–∑–≤–æ–ª–µ–Ω—ñ
            serializer.save()
            return


        # 2. –°—Ç—É–¥–µ–Ω—Ç / –í–∏–∫–ª–∞–¥–∞—á
        if instance.user != user:
            raise PermissionDenied("–¶–µ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞.")
        if instance.status not in ['empty', 'pending']:
            raise PermissionDenied("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –º–æ–∂–Ω–∞ –ª–∏—à–µ –≤ —Å—Ç–∞—Ç—É—Å—ñ 'empty' –∞–±–æ 'pending'.")

        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –ª–∏—à–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        if validated_data.get('user_confirmed') is True and instance.status == 'on_check':
            instance.user_confirmed = True
            instance.save()
            return

        # –ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –ø–æ–ª—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        forbidden_fields = [
            'assigned_master_name',
            'assigned_master_company',
            'assigned_master_phone',
            'assigned_company_phone',
            'status',
            'work_date'
        ]
        for field in forbidden_fields:
            if field in validated_data:
                raise PermissionDenied(f"–ù–µ–¥–æ–∑–≤–æ–ª–µ–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –ø–æ–ª–µ {field}.")

        serializer.save()