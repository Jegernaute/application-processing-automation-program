from rest_framework.permissions import BasePermission, SAFE_METHODS

class IsManager(BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated and request.user.role == "manager"


class IsStudentOrLecturer(BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated and request.user.role in ["student", "lecturer"]

from rest_framework.permissions import BasePermission

class IsOwner(BasePermission):
    def has_object_permission(self, request, view, obj):
        # –Ø–∫—â–æ –æ–±'—î–∫—Ç –º–∞—î –ø–æ–ª–µ user –Ω–∞–ø—Ä—è–º—É
        if hasattr(obj, 'user'):
            return obj.user == request.user
        # –Ø–∫—â–æ –æ–±'—î–∫—Ç –º–∞—î –ø–æ–≤‚Äô—è–∑–∞–Ω—É –∑–∞—è–≤–∫—É
        if hasattr(obj, 'request') and hasattr(obj.request, 'user'):
            return obj.request.user == request.user
        return False


class IsOwnerOrManager(BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated

    def has_object_permission(self, request, view, obj):
        user = request.user

        # üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö –∑–∞—è–≤–æ–∫
        if user.role == "manager":
            if request.method in SAFE_METHODS:
                return True

            # –î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–æ–ª—è, —è–∫—ñ –º–æ–∂–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
            allowed_fields = [
                "status",
                "rejection_comment",
                "assigned_master_name",
                "assigned_master_company",
                "assigned_master_phone",
                "assigned_company_phone",
                "work_date"
            ]
            # –Ø–∫—â–æ —î —Ö–æ—á–∞ –± 1 –ø–æ–ª–µ, —è–∫–µ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–µ ‚Äî –±–ª–æ–∫
            return all(field in allowed_fields for field in view.request.data.keys())

        # üë§ –°—Ç—É–¥–µ–Ω—Ç –∞–±–æ –≤–∏–∫–ª–∞–¥–∞—á ‚Äî —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó –∑–∞—è–≤–∫–∏
        if hasattr(obj, 'user') and obj.user == user:
            return obj.status in ["empty", "rejected"]

        # –£—Å—ñ —ñ–Ω—à—ñ ‚Äî –Ω—ñ
        return False


